# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, cell_quant):
        self.cell_quant = cell_quant

    def make_order(self, my_cell, cell_in_row):
        claster = cell_in_row // my_cell.cell_quant
        remainder = cell_in_row - claster * my_cell.cell_quant
        cell_in_classter = '*' * my_cell.cell_quant
        c = f'{cell_in_classter}\n' * claster
        return c + '*' * remainder

    def __add__(self, other):
        return self.cell_quant + other

    def __sub__(self, other):
        if self.cell_quant < other:
            return f'{self.cell_quant} < {other}. Impossible to sub'
        else:
            return self.cell_quant - other

    def __mul__(self, other):
        return self.cell_quant * other

    def __truediv__(self, other):
        return self.cell_quant // other


cell_1 = Cell(11)
cell_2 = Cell(5)

cell_1_2_add = cell_1 + cell_2.cell_quant
print(cell_1_2_add)

cell_1_2_sub = cell_1 - cell_2.cell_quant
print(cell_1_2_sub)

cell_1_2_mul = cell_1 * cell_2.cell_quant
print(cell_1_2_mul)

cell_1_2_div = cell_1 / cell_2.cell_quant
print(cell_1_2_div)

cell = Cell(5)
cell_my = cell.make_order(cell, 17)
print(cell_my)


